#!/usr/bin/env node

"use strict";

/**
 * Script to initialize database schemas
 *
 * Usage: $ NODE_ENV=[development|test] bin/init-db
 */

switch (process.env.NODE_ENV) {
    case 'development':
        console.log('Resetting local database');
        break;

    case 'test':
        console.log('Resetting test database');
        break;

    default:
        console.error('Unknown environment\r\nUsage: NODE_ENV=[development|test] bin/init-db\r\nExiting...');
        process.exit(1);
        break;
}

var db = require('../models');
var config = require('../config');

db.sequelize
    .sync({force: true})
    .then(
        function () {
            console.log('Synchronization done.');

            if (process.env.NODE_ENV === 'development') {
                db.Permission
                    .bulkCreate(config.permissions)
                    .then(function () {
                        console.log('[PERMISSION] Database populated');
                    });

                if (config.admin) {
                    db.User.create({
                        display_name: config.admin.display_name,
                        permission_id: config.admin.permission_id
                    }).then(function (user) {
                        return db.LocalLogin.create({login: config.admin.login, user_id: user.id})
                    }).then(function (localLogin) {
                        return localLogin.setPassword("admin");
                    }).then(function () {
                        console.log('[ADMIN] Database populated');
                    });
                }
                db.Domain
                    .bulkCreate(config.domains)
                    .then(function () {
                        console.log('[DOMAIN] Database populated');

                        if (config.hasOwnProperty('oauth2_clients') && config.oauth2_clients.length > 0) {
                            var bcrypt = require('bcrypt');
                            for (var i in config.oauth2_clients) {
                                var client = config.oauth2_clients[i];
                                client.client_secret = bcrypt.hashSync(client.client_secret, 5);
                            }
                            db.OAuth2Client.bulkCreate(config.oauth2_clients).then(function () {
                                console.log('[OAUTH2_CLIENT] Database populated');
                            });
                        }
                        else {
                            console.log("No server clients configured");
                        }
                    });
            }
        },
        function (err) {
            console.log('An error occurred while create the table.');
            console.error(err);
        }
    );
